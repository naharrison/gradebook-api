#!/usr/bin/env node

const program = require('commander');

const {initializeGradebook, addStudent, deleteStudent, importRoster, showGradebook, addGradeColumn, addGrade, takeAttendance, addComment, checkoff, calc} = require('./index');

program
  .version('1.0.0')
  .description('Gradebook API')

program
  .command('init <course> <section>')
  .description('Create a new empty grade book')
  .action((course, section) => initializeGradebook(course, section));

program
  .command('addstudent')
  .alias('as')
  .description('Add student')
  .action(() => addStudent());

program
  .command('deletestudent <student>')
  .alias('ds')
  .description('Delete student')
  .action((student) => deleteStudent(student));

program
  .command('import <file> <course> <section>')
  .description('Import Banner roster')
  .action((file, course, section) => importRoster(file, course, section));

program
  .command('addgradecolumn <colname> <course> <section>')
  .alias('agc')
  .description('Add a new grade column')
  .action((colname, course, section) => addGradeColumn(colname, course, section));

program
  .command('addgrade <colname> <student> <score>')
  .alias('ag')
  .description('Add student score')
  .action((colname, student, score) => addGrade(colname, student, score));

program
  .command('show')
  .description('Show gradebook')
  .option('-s, --student <name>', 'Show only one student')
  //.action((options.student) => showGradebook(options.student));
  .action( function(options) { showGradebook(options.student) } );

program
  .command('attendance <course> <section>')
  .alias('att')
  .description('Take attendance for a class')
  .action((course, section) => takeAttendance(course, section));

program
  .command('addcomment <student> <comment>')
  .alias('addc')
  .description('Add a comment (use quotes!)')
  .action((student, comment) => addComment(student, comment));

program
  .command('calc <student>')
  .description('run calc routine for a given student')
  .action((student) => calc(student));

program
  .command('checkoff <student> <assignmentNo>')
  .alias('check')
  .description('Give a student a participation check mark')
  .action((student, assignmentNo) => checkoff(student, assignmentNo));


program.parse(process.argv);
